-------------------------------------------------------------------------------------------------------------------
                                               INSTRUCTION
-------------------------------------------------------------------------------------------------------------------
                                             Comments throw Json
-------------------------------------------------------------------------------------------------------------------
 a. Template adding
    - app/views/restaurants/show.html.haml:
        1. delete iteration
        2. insted of "Comment" component add new "CommentList"
        3. add raw with rendering of 'comments/index.json.jbuilder' template insteat of properties declaring
    - app/views/comments/index.json.jbuilder
        1. create comments folder with index.json.jbuilder file
        2. add json array of comments
        3. add 'comments/comment' partial as comment
    - app/views/comments/_comment.json.jbuilder
        1. create this comment.json.jbuilder partial in comments folder
        2. add comment with id, author, body and rank parameters
        3. convert comment with parameters to json format
    - localhost:3000/restaurants/:id
        1. come to page of one restaurant
        2. come Ctrl + U
        3. check that source of page has react properties
           Example: <div data-react-class="CommentList" data-react-props="{&quot;comments&quot;:&quot; ... </div>

b. Comment recreating
    - app/assets/javascripts/components/comment_list.js.jsx
        1. create comment_list.js.jsx file in components folder
        2. Define CommentList class inherited from React class
        3. Render JSX
        4. In JSX iterate throw "comments" array with map method
        5. Contain function with "comment" parameter as argument of map method
        6. Return "Comment" component
        7. Contain "author", "body" and "rank" properties to "Comment" component
        8. Make recently declared properties equal to key of "comment" object, example: "body={comment.body}"
        9. Add "key" property to "Comment" component and make it equal to "comment" object's "id" key
        10. Make code clearly. Use shortcut expressions declaring. Example: "{ ... comment }"
        11. Check work in localhost:3000/restaurants/:id in Comment's section



-------------------------------------------------------------------------------------------------------------------
                                       Showing throw comments iteration
-------------------------------------------------------------------------------------------------------------------
   Showign throw iterating
    - app/controllers/restaurant_controller:
        define new @comments instance in show action with all restaurant's comments data
    - app/views/restaurants/show.html.erb:
        iterate throw @comments instance to show all properties of current comment in "Comment" component

-------------------------------------------------------------------------------------------------------------------
                                           First Component
-------------------------------------------------------------------------------------------------------------------
 a. React gem
    - Gemfile: gem 'react-rails'
    - $ gem install react-rails
    - $ rails g react:install
    - app/assets/javascripts/application.js:
        //= require react
        //= require react_ujs
        //= require components
    - localhost:3000
    - Ctrl + U, ensure that you have scripts like this: src='assets/react...'

 c. Component creating
    - app/views/restaurants/show.html.haml:
        1. add comment section
        2. add react_component with 'Comment' name
        3. add properties to this component (author, body, rank)
        4. add comment form for structure organization
    - app/assets/javascripts/components/comment.js.jsx:
        1. create comment.js.jsx
        2. create there Comment class inherited from React class
        3. render jsx with exporession describes comment's properties
    - localhost:3000/restaurants/:id to check that properties comes to page


-------------------------------------------------------------------------------------------------------------------
                                           Pages Structure
-------------------------------------------------------------------------------------------------------------------
 a. All restaurants on home page
    - app/controllers/restaurants_controller.rb:
        @restaurants instance to index action with all restaurants
    - app/views/restaurants/index.html.haml
        @restaurants iterating for info. showing
        linking to show page of every restaurant
 b. One restaurant page
     - app/controllers/restaurants_controller.rb:
        add a "show" action with @restaurant instance one restaurant info showing
     - app/views/restaurants/show.html.haml
        create show.html.haml file
        show there info about restaurant
        add the back link and links for info manipulation

 d. New restaurant page
     - app/controllers/restaurants_controller.rb:
       add "new" and "create" actions to make data creating available throw user interface
     - app/views/restaurants/new.html.haml
        create new.html.haml file with partial rendering

 e. Form partial
     - Gemfile: gem 'simple-form'
     - gem install simple-form
     - rails generate simple_form:install --bootstrap
     - app/views/restaurants/_form.html.haml
        create _form.html.haml partial with acording form to manipulate by parametres
     - models/restaurant.rb
        add validation

 f. Restaurant edit page
    - app/controllers/restaurants_controller
       add 'edit' action to restaurants controller with acording functional
    - app/views/restaurants/edit.html.erb
       render form partial

 g. Destroy action
    - app/controllers/restaurants_controller
        add 'destroy' action to restaurants controller with acording functional
    - app/views/restaurants/show.html.erb
        come to page of certain restaurant and check work ability of delete function



-------------------------------------------------------------------------------------------------------------------
                                            Home Page Defining
-------------------------------------------------------------------------------------------------------------------
 a. Controller generation
     - $ rails g controller restaurants index

 b. Routes configuration
    - confing/routes.rb:
        resources :restaurants
        root 'restaurants#index'

 c. Haml Applying
    - Gemfile: gem 'haml'

 d. Views containing
    - rename index.html.erb in restaurants folder to index.html.haml
    - app/views/restaurants/index.html.haml:
        %h1 Hello World
    - localhost:3000

 e. Botstrap setting
    - Gemfile:
        gem 'bootstrap-sass'
    - gem install bootstrap-sass
    - rename "appliaction.css" to "application.css.scss"
    - app/assets/stylesheets/application.css.scss:
        @import "bootstrap-sprockets";
        @import "bootstrap";
    - app/assets/javascripts/application.js
        //= require bootstrap-sprockets

 f. Rename application.html.erb layout to application.html.haml
    - change everything to haml style
    - bootstrap's styles for HTML skeleton
    - add link to root_path and link to rails_admin_path

---------------------------------------------------------------------------------------------------------------------
                                        Setting Up The Model Layer
---------------------------------------------------------------------------------------------------------------------
 a. Ancestry gem adding
    - gem 'ancestry'
    - $ gem install ancestry

 b. New model creating
    - $ rails g model Comment author:string body:text rank:integer restaurant:belongs_to
    - $ rake db:migrate
    - models/comment.rb:
      'belongs_to :restaurant' (should be default)
    - models/restaurant.rb:
      'has_many :comments'

 c. Validation
    - models/comment.rb: 'validates :restaurant, presence: true'
    - $ rails server
    - check in browser 'localhost:3000/admin/comment/new' - 'required' text under 'Restaurant' select field

 d. Record creating
    - $ rails console
    - $ Comment.connection
    - $ Comment.create(author: "Alex", body: "I love this shit", rank: 9, restaurant_id: 1)

 e. Admin panel overview
    - $ rails s
    - in browser: localhost:3000/admin/comment

 f. Ancestry column for relationships
    - $ rails g migration add_ancestry_to_comment
    - migrate/20160527082254_add_ancestry_to_comment:
        'add_column :comments, :ancestry, :string',
        'add_index :comments, :string'
    - $ rake db:migrate
    - models/comment.rb:
        'has_ancestry'
    - $ rails s
    - 'localhost:3000/amdin/comment/new' check ancestry option

 g. Ancestry comment  adding
    - $ rails c
    - > Comment.create(author: "Bob", body: "Alex, I love this sit too", parent: Comment.find(1), restaurant_id: 1)
    - in browser 'localhost:3000/admin/comment/:id/edit' look at Ancestry option, it should has a number
    - > Comment.find(1).children
    - > Comment.find(2).path

-------------------------------------------------------------------------------------------------------------------
                                Scaffolding the Application with Admin Panel
-------------------------------------------------------------------------------------------------------------------
 a. Application creating
    - $ rails new reilly_restaurants
    - $ cd reilly_restaurants

 b. Admin gem uploading
    - gem 'rails_admin'
    - $ bundle install
    - $ rails g rails_admin:install

 c. Model creating
    - $ rails g model Restaurant name:string address:string description:text
    - $ rake db:migrate

 d. Adding records to data base
    - $ rails console
    - > Restaurant.connection
    - > Restaurant.create(name: "Bungalo", address: "Grow Street, 5", description: "You must try this!")

 e. Admin panel overview
    - $ rails server
    - in browser: localhost:3000/admin/restaurant

-------------------------------------------------------------------------------------------------------------------