-------------------------------------------------------------------------------------------------------------------
                                               INSTRUCTION
-------------------------------------------------------------------------------------------------------------------
                                  Flusx Implementation (Actions, Sotre)
-------------------------------------------------------------------------------------------------------------------
 a. Flux installing
   - Gemfile: gem 'flux-rails-assets'
   - $ gem install flux-rails-assets
   -- app/assets/javascripts/application.js
        1. Include: //= require flux
                    //= require eventemitter
        2. Make order: "react", "react_ujs", "flux", "eventemitter" only before "components"
        3. Add: "//= require app" after "components"
   - localhost:3000
        1. Ctrl + U
        2. check that u have script with src="assets/flux..."

 b. Events naming
   - app/assets/javascripts/application.js:
        Add: "//= require app" after "components"
   - app/assets/javascripts/app.js:
        1. Create app.js file
        2. add variable equal to object
        3. add keys pare that equal to events, keys should be uppercase
        4. first key should be event changer that has "change" value
        5. second key equal to data adding to comments array, "comments.add"

 c. Lodash installing
   - Gemfile: gem 'lodash-rails'
   - $ gem install lodash-rails
   - app/assets/javascripts/application.js:
        "//= require lodash" before "components"
   - localhost:3000
        1. open console
        2. enter "_"
        3. ensure that you get "function" after symbol sending

 d. Adding comments to Store throw addComment function to  _comments array
   - app/assets/javascripts/app.js
        1. define store variable equal to new extend
            extend should take as argument empty object, EventEmitter.prototype and another object
           - console: Store, output: Object {_events: undefined, maxListeners: undefined}
         2. in third object add "_comments" key with array that contain "1" number as value, "_comments: [1]"
            - console: Store, output: Object { ... undefined, _comments: Array[1]}
            - console: Store._comments, output: [1]
            - console: EventEmitter.prototype, output: {_events: undefined, _maxListeners: undefined}
            - console: EventEmitter.prototype._comments, output: undefined
            make _comments equal to empty array instead containing of "1" number, "_comments: [1]"
         3. add function named "addComment" that takes "comment" parameter
            inside "addComment" function add "comment" object that is parameter
            "comment" object should has  "id" key, this data should be in "this" "_comments" array
            make this data within array equal to taken "comment" parameter
            - console: Store.addComment({id: 1, body: "Hi!"})
            - console: Store._comments, output: object with recently added content
         4. add "comments' function that return this "_comments" array

  e. Flux Implementation Part I
    - app/assets/javascripts/app.js
        1. add "addChangeListeners" function that takes "callback" as parameter
           within this function add "this" "on" method
           "on" method should takes "Constants" object "CHANGE_EVENT" key and "callback" par. as second argument
        2. add "removeChangeListeners" function with "callback" parameter
           within this function add "this" "removeListeners" method
          "removeListeners" method should takes "Constants" object 's "CHANGE_EVENT" key and "callback" par. as second arg.
        3. add "emitChange" function that contain "this" "emit"
           method takes as argument "Constants" object with "CHANGE_EVENT" key

  f. Flux Implementation Part 2
    - app/assets/javascripts/app.js
        1. add "AppDispatcher" variable that equal to new "Flux"'s "Dispatcher" method
        2. on ntext string add "register" method to "AppDispatcher"
        3. method should take function with "payload" parameter
        4. inside function add "action" variable that equal to "payload" parameter's "actionType"
        6. under variable define switch that takes "action" variable as parameter
        7. switch should has "Constants" class's "ADD_COMMENT" key
        8. this case should describe "Store" with "addComment" method that takes "payload" parameter's "comment"

  g. Data comming
    - app/views/restaurants/show.html.haml
        remove data rendering that is second argument of react_component method
    - app/assets/javascripts/components/comment_list.js.jsx
        remove "comments" array and instead add empty array

  h. Component lifecycle
    - app/assets/javascripts/components/list_component.js.jsx
        1. add "componentDidMount" function that contains
           "Store" with "addChangeListener" method that takes
           "this" "_onChange" function as argument
        2. declare "_onChange" function that contains
           "this" "forceUpdate" method as argument
        3. add "componentWillMount" function that contains
            "Store" with "removeChangeListener" method that takes
            "this" "_onChange" function
        4. add some text to "console.log" to check that constructor is work

  i. Actions adding
    - app/assets/javascripts/app.js
        1. add Actions variable that equal to new "extend" method that takes two arguments
        2. first argument is an empty object
        3. second is "addComment" function that takes "params" as parameter
        4. function contains "ApiDispatcher" that has "dispatch" method
        5. method takes as argument object with "actionType" and "comment" keys
        6. first "actionTypes" key is equal to "Constants" object's "ADD_COMMENT" key that is "'comments.add'"
        7. second "comment" key is equal to gotten "params" parameter
            - console: Actions, output: object with "addComment" function
            - add console.log(payload) before "ApiDispatcher"'s switch
            - console: Actions.addComment({id: 1, body: "it works"}),
                       output: Object with "actionType" that equal to "comments.add" action
                       and "comment" that equal to other Object that store recently added data: id: 1, body: "it works"
            - mark console.log(payload) as comment and refresh page
            - console: Store.comments(), output: empty array
            - console: Actions.addComment({id: 1, body: "works"})
            - console: Actions.addComment({id: 2, body: "also works"})
            - console: Store.comments(), output: recently added objects throw "Actions"'s "addComment" function
        8. in "ApiDispatcher" that takes register method add to case "Store" with "emitChange" method
            - add console.log("rendering") into CommentList to rendering
            - refresh page and type in to console: Actions.addComment({id: 1, body: 'hi"})
            - output should be a "rendering" text after every time when we add objects to store
        9. Go to CommentList component instead of empty array add "Store.comments()" function to map elements
            - console: Actions.addComment({id: 1, author: "Alex", body: "hey, it works", rank: 9})
            - rendering: jsx following CommentList's structure
            - make as comment "console.log("rendering") in render function

-------------------------------------------------------------------------------------------------------------------
                                             Comments throw Json
-------------------------------------------------------------------------------------------------------------------
 a. Template adding
    - app/views/restaurants/show.html.haml:
        1. delete iteration
        2. insted of "Comment" component add new "CommentList"
        3. add raw with rendering of 'comments/index.json.jbuilder' template insteat of properties declaring
    - app/views/comments/index.json.jbuilder
        1. create comments folder with index.json.jbuilder file
        2. add json array of comments
        3. add 'comments/comment' partial as comment
    - app/views/comments/_comment.json.jbuilder
        1. create this comment.json.jbuilder partial in comments folder
        2. add comment with id, author, body and rank parameters
        3. convert comment with parameters to json format
    - localhost:3000/restaurants/:id
        1. come to page of one restaurant
        2. come Ctrl + U
        3. check that source of page has react properties
           Example: <div data-react-class="CommentList" data-react-props="{&quot;comments&quot;:&quot; ... </div>

b. Comment recreating
    - app/assets/javascripts/components/comment_list.js.jsx
        1. create comment_list.js.jsx file in components folder
        2. Define CommentList class inherited from React class
        3. Render JSX
        4. In JSX iterate throw "comments" array with map method
        5. Contain function with "comment" parameter as argument of map method
        6. Return "Comment" component
        7. Contain "author", "body" and "rank" properties to "Comment" component
        8. Make recently declared properties equal to key of "comment" object, example: "body={comment.body}"
        9. Add "key" property to "Comment" component and make it equal to "comment" object's "id" key
        10. Make code clearly. Use shortcut expressions declaring. Example: "{ ... comment }"
        11. Check work in localhost:3000/restaurants/:id in Comment's section



-------------------------------------------------------------------------------------------------------------------
                                       Showing throw comments iteration
-------------------------------------------------------------------------------------------------------------------
   Showign throw iterating
    - app/controllers/restaurant_controller:
        define new @comments instance in show action with all restaurant's comments data
    - app/views/restaurants/show.html.erb:
        iterate throw @comments instance to show all properties of current comment in "Comment" component

-------------------------------------------------------------------------------------------------------------------
                                           First Component
-------------------------------------------------------------------------------------------------------------------
 a. React gem
    - Gemfile: gem 'react-rails'
    - $ gem install react-rails
    - $ rails g react:install
    - app/assets/javascripts/application.js:
        //= require react
        //= require react_ujs
        //= require components
    - localhost:3000
    - Ctrl + U, ensure that you have scripts like this: src='assets/react...'

 c. Component creating
    - app/views/restaurants/show.html.haml:
        1. add comment section
        2. add react_component with 'Comment' name
        3. add properties to this component (author, body, rank)
        4. add comment form for structure organization
    - app/assets/javascripts/components/comment.js.jsx:
        1. create comment.js.jsx
        2. create there Comment class inherited from React class
        3. render jsx with exporession describes comment's properties
    - localhost:3000/restaurants/:id to check that properties comes to page


-------------------------------------------------------------------------------------------------------------------
                                           Pages Structure
-------------------------------------------------------------------------------------------------------------------
 a. All restaurants on home page
    - app/controllers/restaurants_controller.rb:
        @restaurants instance to index action with all restaurants
    - app/views/restaurants/index.html.haml
        @restaurants iterating for info. showing
        linking to show page of every restaurant
 b. One restaurant page
     - app/controllers/restaurants_controller.rb:
        add a "show" action with @restaurant instance one restaurant info showing
     - app/views/restaurants/show.html.haml
        create show.html.haml file
        show there info about restaurant
        add the back link and links for info manipulation

 d. New restaurant page
     - app/controllers/restaurants_controller.rb:
       add "new" and "create" actions to make data creating available throw user interface
     - app/views/restaurants/new.html.haml
        create new.html.haml file with partial rendering

 e. Form partial
     - Gemfile: gem 'simple-form'
     - gem install simple-form
     - rails generate simple_form:install --bootstrap
     - app/views/restaurants/_form.html.haml
        create _form.html.haml partial with acording form to manipulate by parametres
     - models/restaurant.rb
        add validation

 f. Restaurant edit page
    - app/controllers/restaurants_controller
       add 'edit' action to restaurants controller with acording functional
    - app/views/restaurants/edit.html.erb
       render form partial

 g. Destroy action
    - app/controllers/restaurants_controller
        add 'destroy' action to restaurants controller with acording functional
    - app/views/restaurants/show.html.erb
        come to page of certain restaurant and check work ability of delete function



-------------------------------------------------------------------------------------------------------------------
                                            Home Page Defining
-------------------------------------------------------------------------------------------------------------------
 a. Controller generation
     - $ rails g controller restaurants index

 b. Routes configuration
    - confing/routes.rb:
        resources :restaurants
        root 'restaurants#index'

 c. Haml Applying
    - Gemfile: gem 'haml'

 d. Views containing
    - rename index.html.erb in restaurants folder to index.html.haml
    - app/views/restaurants/index.html.haml:
        %h1 Hello World
    - localhost:3000

 e. Botstrap setting
    - Gemfile:
        gem 'bootstrap-sass'
    - gem install bootstrap-sass
    - rename "appliaction.css" to "application.css.scss"
    - app/assets/stylesheets/application.css.scss:
        @import "bootstrap-sprockets";
        @import "bootstrap";
    - app/assets/javascripts/application.js
        //= require bootstrap-sprockets

 f. Rename application.html.erb layout to application.html.haml
    - change everything to haml style
    - bootstrap's styles for HTML skeleton
    - add link to root_path and link to rails_admin_path

---------------------------------------------------------------------------------------------------------------------
                                        Setting Up The Model Layer
---------------------------------------------------------------------------------------------------------------------
 a. Ancestry gem adding
    - gem 'ancestry'
    - $ gem install ancestry

 b. New model creating
    - $ rails g model Comment author:string body:text rank:integer restaurant:belongs_to
    - $ rake db:migrate
    - models/comment.rb:
      'belongs_to :restaurant' (should be default)
    - models/restaurant.rb:
      'has_many :comments'

 c. Validation
    - models/comment.rb: 'validates :restaurant, presence: true'
    - $ rails server
    - check in browser 'localhost:3000/admin/comment/new' - 'required' text under 'Restaurant' select field

 d. Record creating
    - $ rails console
    - $ Comment.connection
    - $ Comment.create(author: "Alex", body: "I love this shit", rank: 9, restaurant_id: 1)

 e. Admin panel overview
    - $ rails s
    - in browser: localhost:3000/admin/comment

 f. Ancestry column for relationships
    - $ rails g migration add_ancestry_to_comment
    - migrate/20160527082254_add_ancestry_to_comment:
        'add_column :comments, :ancestry, :string',
        'add_index :comments, :string'
    - $ rake db:migrate
    - models/comment.rb:
        'has_ancestry'
    - $ rails s
    - 'localhost:3000/amdin/comment/new' check ancestry option

 g. Ancestry comment  adding
    - $ rails c
    - > Comment.create(author: "Bob", body: "Alex, I love this sit too", parent: Comment.find(1), restaurant_id: 1)
    - in browser 'localhost:3000/admin/comment/:id/edit' look at Ancestry option, it should has a number
    - > Comment.find(1).children
    - > Comment.find(2).path

-------------------------------------------------------------------------------------------------------------------
                                Scaffolding the Application with Admin Panel
-------------------------------------------------------------------------------------------------------------------
 a. Application creating
    - $ rails new reilly_restaurants
    - $ cd reilly_restaurants

 b. Admin gem uploading
    - gem 'rails_admin'
    - $ bundle install
    - $ rails g rails_admin:install

 c. Model creating
    - $ rails g model Restaurant name:string address:string description:text
    - $ rake db:migrate

 d. Adding records to data base
    - $ rails console
    - > Restaurant.connection
    - > Restaurant.create(name: "Bungalo", address: "Grow Street, 5", description: "You must try this!")

 e. Admin panel overview
    - $ rails server
    - in browser: localhost:3000/admin/restaurant

-------------------------------------------------------------------------------------------------------------------